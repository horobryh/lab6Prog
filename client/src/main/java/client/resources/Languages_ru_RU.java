package client.resources;

import java.util.ListResourceBundle;

public class Languages_ru_RU extends ListResourceBundle {
    @Override
    protected Object[][] getContents() {
        return new Object[][]{
                {"auth.authorizationHeaderLabel", " Авторизация"},
                {"lang.denmarkLanguageMenuItem", "Датский"},
                {"lang.englishLanguageMenuItem", "Английский"},
                {"lang.languageMenu", "Язык"},
                {"auth.loginTextField", "Введите логин..."},
                {"auth.passwordPasswordField", "Введите пароль..."},
                {"auth.portBindingButton", "Подключиться"},
                {"lang.russianLanguageMenuItem", "Русский"},
                {"lang.turkishLanguageMenuItem", "Турецкий"},
                {"auth.authButton", "Авторизоваться"},
                {"main.menu.addNewTicket", "Добавить новый билет"},
                {"main.menu.clearCollection", "Очистить коллекцию"},
                {"main.menu.countTicketsThat", "Посчитать билеты, скидка которых меньше, чем..."},
                {"main.menu.printDiscount", "Распечатать все значения discount"},
                {"main.menu.uniquePrice", "Уникальные значения price"},
                {"main.menu.infoAboutCollection", "Информация о коллекции"},
                {"main.commandMenu", "Команды"},
                {"main.helpMenu", "Помощь"},
                {"main.help.help", "Распечатать список команд"},
                {"main.filterByColumnLabel", "Фильтровать по:"},
                {"main.refreshTableButton", "Обновить"},
                {"main.currentUserLabel", "Текущий пользователь:"},
                {"edit.header", "Редактирование билета"},
                {"edit.ticketName", "Название билета:"},
                {"edit.ticketX", "Координата X"},
                {"edit.ticketY", "Координата Y"},
                {"edit.ticketPrice", "Цена"},
                {"edit.ticketDiscount", "Скидка"},
                {"edit.ticketType", "Тип билета"},
                {"edit.eventName", "Название события"},
                {"edit.eventDate", "Дата события"},
                {"edit.eventMinAge", "Минимальный возраст"},
                {"edit.eventDescription", "Описание события"},
                {"edit.eventType", "Тип события"},
                {"edit.saveTicketIfMinButton", "Сохранить, если билет минимален"},
                {"edit.saveTicketButton", "Сохранить билет"},
                {"edit.alerts.blankFieldError", "Похоже, Вы заполнили не все поля формы. Попробуйте снова."},
                {"edit.ticketComment", "Комментарий"},
                {"auth.alerts.authError", "Ошибка авторизации"},
                {"main.alerts.error", "Произошла ошибка "},
                {"main.alerts.success", "Успешно!"},
                {"main.collectionType", "Коллекция типа"},
                {"main.initializationDate", "Дата инициализации: "},
                {"main.itemsQuantity", "Количество элементов: "},
                {"main.alerts.discountQuantity", "Введите значение discount:"},
                {"main.alerts.notNumber", "Значение не является числом!"},
                {"main.alerts.discountError", "Значение не помещается в пределы скидки"},
                {"main.ticketEditing", "Изменение билета"},
                {"main.alerts.fieldsError", "Некорректно заполнены некоторые поля формы."},
                {"main.mainWindow", "Основное окно"},
                {"auth.alerts.serverConnectionError", "Произошла ошибка соединения с сервером "},
                {"auth.alerts.serverConnectionSuccess", "Соединение с сервером прошло успешно!"},
                {"auth.serverConnection", "Соединение с сервером"},
                {"drawing.windowTitle", "Визуализация текущего состояния"},
                {"main.menu.changeUserColors", "Обновить цвета таблицы"},
                {"edit.deleteTicketButton", "Удалить"},
                {"main.addIfMin", "Добавить билет, если минимален"},
                {"main.executeScript", "Выполнить скрипт"}
        };
    }
}
